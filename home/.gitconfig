[branch]
  autosetuprebase = always
[user]
       # UNCOMMENT and SET YOUR menlosecurity.com E-MAIL AND FULL NAME
       # SO THAT THEY APPEAR CORRECTLY ON COMMITS:
  email = chris.ford@menlosecurity.com
  name = Chris Ford
[commit]
       # UNCOMMENT and SET THIS BASED ON WHAT YOU ARE DEVELOPING:
  template = ~/menlo/safeview/service/misc/commit_template.txt
[merge]
  ff = only
  summary = true
[push]
  default = simple
[rebase]
  stat = true
[clean]
  requireForce = true
[core]
    # CHOOSE YOUR FAVORITE EDITOR: vim, vi, emacs, nano
  editor = vim
	excludesfile = /Users/chrisf/.gitignore_global
  autocrlf = input
  ; pager = less -XRMSI
  pager = tig
  eol = native
[color]
  ; diff = auto
  pager = no
  status = auto
  branch = auto
  interactive = auto
  ui = auto
[gc]
  auto = 1
[alias]
  # The basics.
  st = status -uno
  ci = commit
  co = checkout
  br = branch

  d = diff                                # show changes in the working directory (not including index)
  ds = diff --staged                      # show changes in the index only (not working directory)

  unstage = reset HEAD                    # un-add files from index (tracking)
  uncommit = reset --soft HEAD^           # go back one commit, put changes into your working dir and index
  chunkyadd = add --patch                 # stage commits chunk by chunk
  amend = commit --amend                  # fix last commit
  ammend = commit --amend                 # for those who can't spell :-)

  # 'git add -u' handles deleted files, but not new files
  # 'git add .' handles any current and new files, but not deleted
  # 'git addall' now handles all changes
  addall = !sh -c 'git add . && git add -u'

  outgoing = log -u origin/dev..dev # outgoing changes (in local, but not origin)
  out = log -u origin/dev..dev # outgoing changes (in local, but not origin)

  b = branch -v                   # show commit messages on branch list
  t = tag -l                      # show commit messages on tag list
  r = remote -v                   # show urls of remotes

  # Handy shortcuts for rebasing
  rc = rebase --continue
  rs = rebase --skip
  ra = rebase --abort

  # copy a commit from another branch with source info
  cp = cherry-pick -x             

  # create a new branch (mnemonic: "git new branch branchname...")
  nb = checkout -b  

  stat = status

  # Better log formatting
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  filelog = log -u  # show changes to a file
  changelog = log --pretty=format:\" * %s\"

  # next, prev
  # id = !"git --no-pager log -1 HEAD^"
  id = !"git --no-pager log -1 HEAD^ --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
  prev = checkout HEAD^
  next = "!sh -c 'git log --reverse --pretty=%H dev | awk \"/$(git rev-parse HEAD)/{getline;print}\" | xargs git checkout'"

  # Show status and diff of dirty submodules
  subdiff = !"git submodule foreach --recursive --quiet '[ \"$(git status -s)\" ] && echo \"--- $name ---\" && git status -s && git diff --unified=1 || :'"

  # Pull all submodules
  subpull = !"git-subpull-async"

  # Update all submodules
  subupdate = !"git submodule sync && git submodule update --init --recursive"

  # Checkout master branch of all submodules
  subcheckout = !"git submodule foreach git checkout master"

  # Reset all submodules
  subreset = !"git submodule foreach --recursive git checkout -- . && git submodule foreach --recursive git clean -f"

  # Show current branch of each submodule
  subbranch = !"git submodule foreach --recursive 'git rev-parse --abbrev-ref HEAD'"

  # show list of contributors in descending order by number of commits
  rank = shortlog -sn --no-merges

  # given any git object, try to show it briefly
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

  # Search for a given string in all patches and print commit messages
  # example: search for any commit that adds or removes string "foobar"
  #     git searchcommits foobar
  # example: search commits for string "foobar" in directory src/lib
  #     git searchcommits foobar src/lib
  # example: search commits for "foobar", print full diff of commit with 1 line context
  #     git searchcommits foobar --pickaxe-all -U1 src/lib
  searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

  # Add modified files to previous commit
  oups = "!git add -A -v && git commit --amend -C HEAD"

  # very compact log
  lol = log --graph --decorate --pretty=format:'%h %an: %s' --abbrev-commit

  cmap = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  map = log --graph --full-history --all --color --decorate
  lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg = !"git lg1"
[init]
	templatedir = ~/.git_template
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
